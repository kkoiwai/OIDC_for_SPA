<html>

<head>
    <style type="text/css">
        <!--
        p.instruction {
            color: blue;
            line-height: 1.5;
        }

        p.instruction_ja {
            color: green;
            line-height: 1.5;
        }
        -->
    </style>
</head>

<body>

    <script>

        function getOidcUrl() {

            console.log("access /api/login_info")
            var xhr = new XMLHttpRequest();
            xhr.open("GET", "/api/login_info");
            xhr.addEventListener("load", function (e) {
                var resp = JSON.parse(xhr.responseText);
                console.log(resp);
                if (resp.url && resp.session_id) {
                    // save session_id 
                    localStorage.setItem('session_id', resp.session_id);
                    document.getElementById("session_id").value = resp.session_id;

                    // save url 
                    document.getElementById("oidc_url").innerText = resp.url;
                } else {
                    alert("Server Error")
                }
            });
            xhr.send();

            // generage state
            const state = getRandomStr();
            localStorage.setItem('state', state);
            document.getElementById("local_state").innerText = state;
        }

        function openOidcUrl() {
            // Open URL
            window.location.href = document.getElementById("oidc_url").innerText + "&state=" + localStorage.getItem('state');
        }

        function sendAuthCode() {

            session_id = localStorage.getItem('session_id');
            if (!session_id) {
                alert("Not logged in");
                return;
            }

            console.log("access /api/auth_code?code=" + document.getElementById("auth_code").innerText);
            var xhr = new XMLHttpRequest();
            xhr.open("GET", "/api/auth_code?code=" + document.getElementById("auth_code").innerText);
            xhr.setRequestHeader("Authorization", "Bearer " + session_id);
            xhr.addEventListener("load", function (e) {
                console.log(xhr.responseText);
                var user_info = JSON.parse(xhr.responseText);
                document.getElementById("user_info_authCode").innerText = JSON.stringify(user_info, null, 2);
            });
            xhr.send();

            // remove query parameter from address bar
            history.replaceState("", "", "/")
        }

        function getUserInfo() {

            session_id = localStorage.getItem('session_id');
            if (!session_id) {
                alert("Not logged in");
                return;
            }

            console.log("access /api/user_info")
            var xhr = new XMLHttpRequest();
            xhr.open("GET", "/api/user_info");
            xhr.setRequestHeader("Authorization", "Bearer " + session_id);
            xhr.addEventListener("load", function (e) {
                console.log(xhr.responseText);
                var user_info = JSON.parse(xhr.responseText);
                document.getElementById("user_info_session").innerText = JSON.stringify(JSON.parse(user_info.user_info), null, 2);
            });
            xhr.send();
        }
        function logout() {

            session_id = localStorage.getItem('session_id');
            if (!session_id) {
                alert("Not logged in");
                return;
            }

            console.log("access /api/logout")
            var xhr = new XMLHttpRequest();
            xhr.open("GET", "/api/logout");
            xhr.setRequestHeader("Authorization", "Bearer " + session_id);
            xhr.addEventListener("load", function (e) {
                var resp = JSON.parse(xhr.responseText);
                console.log(resp);
                if (resp.success) {

                } else {
                    alert("logout failed")
                }
            });
            xhr.send();

            // delete local data
            localStorage.setItem('session_id', "");
            localStorage.setItem('state', "");

            document.getElementById("session_id").value = "";
            document.getElementById("auth_code").innerText = "";
            document.getElementById("local_state").innerText = "";
            document.getElementById("user_info_authCode").innerText = "";
            document.getElementById("server_state").innerText = "";
            document.getElementById("state_match").innerText = "";
            document.getElementById("user_info_session").innerText = "";

            // show 1. Initialize 
            document.getElementById("div_init").style.display = "block";
        }

        function getRandomStr() {
            // Generate Random locally
            var cryptoObj = window.crypto || window.msCrypto; // for IE 11
            var array = new Uint8Array(8);
            cryptoObj.getRandomValues(array);
            const hexOctets = []; // new Array(buff.length) is even faster (preallocates necessary array size), then use hexOctets[i] instead of .push()
            for (let i = 0; i < array.length; ++i) {
                hexOctets.push(btoa(array[i]));
            }
            //https://crieit.net/posts/JavaScript-ArrayBuffer-Base64URL
            const joinedStr = hexOctets.join("");
            const randromStrFromLocal = joinedStr.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '')

            return randromStrFromLocal
        }


        function sessionIdChanged() {
            // save session_id 
            localStorage.setItem('session_id', document.getElementById("session_id").value);
        }

        function toggle_hide(div_id) {
            if (document.getElementById(div_id).style.display == "none") {
                document.getElementById(div_id).style.display = "block";
            } else {
                document.getElementById(div_id).style.display = "none"
            }
        }

        window.onload = function () {
            session_id = localStorage.getItem('session_id');
            if (!session_id) {
                // if session_id does not exist, the user is not logged in, so show only 1.Initialize
                toggle_hide('div_authCode');
                toggle_hide('div_interact');
                toggle_hide('div_logout')

            } else {
                // if session_id exists, the user may be already logged in
                document.getElementById("session_id").value = session_id;
                toggle_hide('div_init');

                // if state is saved
                if (localStorage.getItem('state')) {
                    document.getElementById("local_state").innerText = localStorage.getItem('state');
                }

                // if authcode is set
                var queryparams = location.search;
                if (queryparams) {
                    var rawParams = queryparams.replace('?', '').split('&');
                    rawParams.forEach(function (prm, i) {
                        // console.log(prm);
                        var kv = prm.split('=');
                        if (kv[0] == "code") {
                            document.getElementById("auth_code").innerText = kv[1];
                        }
                        if (kv[0] == "state") {
                            document.getElementById("server_state").innerText = kv[1];
                            serverState = kv[1];
                            localState = document.getElementById("local_state").innerText;
                            if (serverState == localState) {
                                document.getElementById("state_match").innerText = "State Matches";
                            } else {
                                document.getElementById("state_match").innerText = "State Does NOT Match"
                            }
                        }
                    });


                } else {
                    toggle_hide('div_authCode');
                }
            }
        }
    </script>

    <h1>OIDC SPA DEMO</h1>

    <p class="instruction">
        Very simple implementation of tri-party (Browser - RP - IDP) OIDC login
    </p>
    <p class="instruction_ja">
        SPAでOIDC(OpenID Connect)によるログインを実現するためのシンプルな実装サンプルです。ブラウザ、RP(アプリサーバ)、IDP(IDプロバイダ)の3者で相互に通信して、ユーザ認証を行います。
    </p>
    <p>SessionID (saved in localStorage) <input id="session_id" size=50 onchange="sessionIdChanged" /></p>

    <h2>1. Initialize <a onclick="toggle_hide('div_init')">▼</a></h2>
    <div id="div_init">
        <p class="instruction">
            First of all, access the App server to retrieve session_id and OIDC IDP's authorication endpoint url with
            required parameters.
        </p>
        <p class="instruction_ja">
            まずはアプリサーバにアクセスし、今後このブラウザ（セッション）を特定するためのセッションIDを払い出し、かつ、IDPへアクセスするためのパラメータ付きURLを受信します。パラメータは、OIDC(OAuth2.0)仕様で定義されたもので、client_id,
            redirect_uriなどが含まれます。PKCEと呼ばれるセキュリティの仕組みを使うため、サーバ側で生成したコードがセッションIDと紐付けてDBに保存されます。このコードはこの後、ブラウザから受信した認可コードをIDPに送信する際に利用します。
        </p>
        <button id="loginButton" onclick="getOidcUrl()">(1) Retrieve SessionID and OIDC URL</button>
        <p>Received OIDC URL:
        <pre id="oidc_url"></pre>
        </p>
        <p>Locally Generated State:
        <pre id="local_state"></pre>
        </p>
        <p class="instruction">
            Then, concatenate the URL of OIDC Authentication endpoint and locally-generated state, and go to the URL.
            The state value should be saved in browser for the later use.
        </p>
        <p class="instruction_ja">
            IDPのAuthorizationエンドポイントへのURLを受信したら、ローカルで生成した乱数（State）をURLに付与して、URLに遷移します。
        </p>
        <button id="oidcRequestButton" onclick="openOidcUrl()">(2) Go to OIDC URL</button>

    </div>

    <h2>2. Send Authorizaton Code <a onclick="toggle_hide('div_authCode')">▼</a></h2>
    <div id="div_authCode">
        <p class="instruction">
            Now that you are back from IDP's login and consent screen. You can see the authorization code and state in
            the address bar of the browser.
        </p>
        <p class="instruction_ja">
            IDPでのログインと、情報共有への同意画面を経て、このページに戻ってきたことと思います。ブラウザのアドレスバーには、IDPから返却された認可コードとStateが付与されていることが見えます。
        </p>
        <p>Received Authorization Code:
        <pre id="auth_code"></pre>
        </p>
        <p>Received State:
        <pre id="server_state"></pre> <span id="state_match" style="color:red; font-weight: bold;"></span> </p>
        <p class="instruction">
            Once you make sure that the state returned from IDP and the state saved in browser is identical, send the
            authorization code to App server (RP).
        </p>
        <p class="instruction_ja">
            サーバから返却されたState値とブラウザで保存していたStateが一致することを確認したら、認可コードをアプリサーバ(RP)に送信します。
        </p>
        <button onclick="sendAuthCode()">(3) Send AuthCode and Get User Info</button>

        <p class="instruction">
            App server (RP) will send the authorization code and other parameters to the IDP to get ID token. App server
            will keep the received ID token together with SessionID. App server will then send back the user data in the
            ID token to browser.
        </p>
        <p class="instruction_ja">
            アプリサーバ(RP)は受信した認可コードをIDPに送信して、IDトークンを受信し、セッションIDと紐付けてDBに保存します。アプリサーバは受信したIDトークンをデコードして、ブラウザに返却します。
        </p>

        <p>Received User Info
        <pre id="user_info_authCode"></pre>
        </p>
    </div>

    <h2>3. Interact with Server using SessionID <a onclick="toggle_hide('div_interact')">▼</a></h2>
    <div id="div_interact">
        <p class="instruction">
            As long as SessionID is retained in browser, you can retrieve user data stored in the App server. Try
            reloading the page and hit the button below. You can also modify the SessionID on the top of the page to
            make sure you can no longer get the same information.
        </p>
        <p class="instruction_ja">
            セッションIDがブラウザに保存されている限り、アプリサーバに保存されているユーザ情報を再取得することができます。試しに当ページをリロードしてから下のボタンを押してみてください。さらに、ページ上部に表示されているセッションIDを書き換えて、サーバからエラーが返却されることを試すこともできます。
        </p>
        <button onclick="getUserInfo()">(4) Send SessionID and Get User Info</button>

        <p>Received User Info
        <pre id="user_info_session"></pre>
        </p>
    </div>


    <h2>4. Log out <a onclick="toggle_hide('div_logout')">▼</a></h2>
    <div id="div_logout">

        <p class="instruction">
            Once you are done experimenting the demo, hit the button below to disable session on the server and delete
            local data.
        </p>
        <p class="instruction_ja">
            一通り遊び終わったら、下記ボタンを押すことで、サーバ側のセッションIDを非活性化し、ブラウザの情報を消去します。
        </p>
        <button onclick="logout()">(5) Log out from server and delete SessionID</button>
    </div>


    <p>Created by Kosuke Koiwai</p>


</body>

</html>